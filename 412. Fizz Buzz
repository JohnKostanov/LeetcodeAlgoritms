Given an integer `n`, return *a string array* `answer` *(**1-indexed**) where*:
- `answer[i] == "FizzBuzz"` if `i` is divisible by `3` and `5`.
- `answer[i] == "Fizz"` if `i` is divisible by `3`.
- `answer[i] == "Buzz"` if `i` is divisible by `5`.
- `answer[i] == i` (as a string) if none of the above conditions are true.

Учитывая целое число n, верните `answer` в виде массива строк, где:
`answer[i]` == "FizzBuzz", если я делится на 3 и 5.
`answer[i]` == "Fizz", если я делится на 3.
`answer[i]` == "Buzz", если i делится на 5.
`answer[i]` == i (как строка), если ни одно из вышеуказанных условий не верно.

//1
func fizzBuzz(_ n: Int) -> [String] {
    var result = [String]()
    for i in 1...n {
        if i.isMultiple(of: 3) && i % 5 == 0 {
            result.append("FizzBuzz")
        } else if i.isMultiple(of: 3) {
            result.append("Fizz")
        } else if i.isMultiple(of: 5) {
            result.append("Buzz")
        } else {
            result.append("\(i)")
        }
    }
    print(result)
    return result
}

let resultTestFirst = ["1","2","Fizz"]
assert(resultTestFirst == fizzBuzz(3))

let resultTestSecond = ["1","2","Fizz","4","Buzz"]
assert(resultTestSecond == fizzBuzz(5))

let resultTestThird = ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]
assert(resultTestThird == fizzBuzz(15))

//2
func fizzBuzz(_ n: Int) -> [String] {
    var result = [String]()
    (1...n).forEach { number in
        switch number {
        case _ where number.isMultiple(of: 15):
            result.append("FizzBuzz")
        case _ where number.isMultiple(of: 3):
            result.append("Fizz")
        case _ where number.isMultiple(of: 5):
            result.append("Buzz")
        default:
            result.append("\(number)")
        }
    }
    print(result)
    return result
}

//2b
func fizzBuzz(_ n: Int) -> [String] {
    var result = [String]()
    (1...n).forEach { number in
        switch (number.isMultiple(of: 3), number.isMultiple(of: 5)) {
        case (true, true):
            result.append("FizzBuzz")
        case (true, false):
            result.append("Fizz")
        case (false, true):
            result.append("Buzz")
        case (false, false):
            result.append("\(number)")
        }
    }
    print(result)
    return result
}

//2c
func fizzBuzz(_ n: Int) -> [String] {
    var result = [String]()
    (1...n).forEach { number in
        switch (number % 3, number % 5) {
        case (0, 0):
            result.append("FizzBuzz")
        case (0, _):
            result.append("Fizz")
        case (_, 0):
            result.append("Buzz")
        case (_, _):
            result.append("\(number)")
        }
    }
    print(result)
    return result
}

//3
func fizzBuzz(_ n: Int) -> [String] {
    return (1...n).reduce(into: [String]()) { partialResult, number in
        switch number {
        case _ where number.isMultiple(of: 15):
            partialResult.append("FizzBuzz")
        case _ where number.isMultiple(of: 3):
            partialResult.append("Fizz")
        case _ where number.isMultiple(of: 5):
            partialResult.append("Buzz")
        default:
            partialResult.append("\(number)")
        }
    }
}

//4
func fizzBuzz(_ n: Int) -> [String] {
    (1...n).reduce(into: [String]()) { $1.isMultiple(of: 3) && $1.isMultiple(of: 5) ? $0.append("FizzBuzz") : $1.isMultiple(of: 3) ? $0.append("Fizz") : $1.isMultiple(of: 5) ? $0.append("Buzz") : $0.append("\($1)") }
}

//5
func fizzBuzz(_ n: Int) -> [String] {
    (1...n).map { $0.isMultiple(of: 15) ? "FizzBuzz" : $0.isMultiple(of: 3) ? "Fizz" : $0.isMultiple(of: 5) ? "Buzz" : "\($0)" }
}


